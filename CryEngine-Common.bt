//------------------------------------------------
//--- 010 Editor v11.0.1 Binary Template
//
//      File: CryEngine-Common.bt
//   Authors: Geoff Gerber
//   Version: 0.1
//   Purpose: Common structs and functions for all CryEngine versions
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

#ifndef COMMON_H
#define COMMON_H

#include "Cryengine-Structs.bt"
#include "Cryengine-Enums.bt"

typedef short snorm <read=Read_SNORM>;
typedef ushort unorm <read=Read_UNORM>;

string Read_SNORM(short s) {
    string t;
    float f = Max(s/32767.0, -1.0);
    SPrintf( t, "%g", f );
    return t;
};

string Read_UNORM(ushort s) {
    string t;
    float f = s/65535.0;
    SPrintf( t, "%g", f );
    return t;
};

struct VECTOR3SNORM {
    snorm x;
    snorm y;
    snorm z;
};

struct VECTOR4SNORM {
    snorm x;
    snorm y;
    snorm z;
    snorm w;
};

struct BONEMAP(int numberOfVertices) {
    uint bytesPerElement;
    BONEMAPDATA bonemap(bytesPerElement)[numberOfVertices] <comment=PrintBoneMapData>;
};

struct UNKNOWN_4BYTE {
    byte x;
    byte y;
    byte z;
    byte w;
};

struct UNKNOWN2 {
    UNKNOWN_4BYTE dataBlock[6];
};

struct UNKNOWN(int numberOfVertices) {
    uint bytesPerElement;
    UNKNOWN2 unknown[numberOfVertices];
};

string PrintTangent(TANGENT_BYTE &tan) {
    string result;
    local VECTOR3 tangent;
    tangent.x = (2 * (tan.x/127.0 * tan.z/127.0 + tan.y/127.0 * tan.w/127.0));
    tangent.y = (2 * (tan.y/127.0 * tan.z/127.0 - tan.x/127.0 * tan.w/127.0));
    tangent.z = (2 * (tan.z/127.0 * tan.z/127.0 + tan.w/127.0 * tan.w/127.0)) - 1;
    SPrintf(result, "%f, %f, %f", tangent.x, tangent.y, tangent.z);
    return result;
};

float CryHalfToFloat(ushort value) {
    local uint Mantissa;
    local uint Exponent;
    local uint Result;

    Mantissa = (uint)(value & 0x03FF);

    if ((value & 0x7C00) != 0)  // The value is normalized
    {
        Exponent = (uint)((value >> 10) & 0x1F);
    }
    else if (Mantissa != 0)     // The value is denormalized
    {
        // Normalize the value in the resulting float
        Exponent = 1;

        do
        {
            Exponent--;
            Mantissa <<= 1;
        } while ((Mantissa & 0x0400) == 0);

        Mantissa &= 0x03FF;
    }
    else                        // The value is zero
    {
        Exponent = (uint)-112;
    }

    Result = ((value & 0x8000) << 16) | // Sign
        ((Exponent + 112) << 23) | // Exponent
        (Mantissa << 13);          // Mantissa

    return (float)Result;
};

float Decode(float f) {
    f = f * 2.0 - 1.0;
 
    // https://twitter.com/Stubbesaurus/status/937994790553227264
    local VECTOR3 n;
    n.x = f.x;
    n.y = f.y;
    n.z = 1.0 - abs(f.x) - abs(f.y);
    local float t = saturate(-n.z);
    n.xy += n.xy >= 0.0 ? -t : t;
    return normalize(n);
};

//typedef struct {
//    char data[5]; // String data for hex representation
//    int length;   // Length of the string
//} String;
//
//int hexCharToInt(char hex)
//{
//    if (hex >= '0' && hex <= '9') return hex - '0';
//    if (hex >= 'A' && hex <= 'F') return hex - 'A' + 10;
//    if (hex >= 'a' && hex <= 'f') return hex - 'a' + 10;
//    return 0; // Default case for invalid input
//};
//
//// Convert a two-character hex string in a String structure to an integer
//int byte1HexToIntType2(String hexString, int startIndex)
//{
//    char high = hexString[startIndex];
//    char low = hexString[startIndex + 1];
//    return (hexCharToInt(high) << 4) | hexCharToInt(low);
//}

#endif
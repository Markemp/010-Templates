//------------------------------------------------
//--- 010 Editor v11.0 Binary Template
//
//      File: 
//   Authors: Geoffrey Gerber
//   Version: 0.1
//   Purpose: Star Citizen #ivo files
//  Category: Games
// File Mask: #ivo
//  ID Bytes: 4
//   History: 
//------------------------------------------------

// Ivo files
#include "CryengineIvo-Structs.bt"
#include "Cryengine-Common.bt"

local uint pos;
local int64 fileSize = FileSize() ;

struct HEADER {
    char fileSig[4];
    uint version;
    uint numChunks;
    int chunkHeaderTableOffset;  // location of header chunks
} headerInfo <bgcolor=cLtBlue>;

struct CHUNKTABLE {
    CHUNKTYPE chunkType <format=hex>;
    uint version <format=hex>;  
    uint64 offset <format=hex>;
};

struct MESHCHUNK {
    uint flags2;  // 4 = no normals datastream, 5 has normals datastream
    uint numberOfVertices;
    uint numberOfIndices;
    uint numberOfSubmeshes;
    uint unknown;
    VECTOR3 minBound <comment=PrintVector3>;
    VECTOR3 maxBound <comment=PrintVector3>;
    uint unknown2;
};

struct BONETOWORLD {
    float row1[4];
    float row2[4];
    float row3[4];
};

struct BONE {
    uint controllerId;
    uint limbId;
    int parentIndex;
    QUATERION relativeQuat <comment=GetQuaterion>;
    VECTOR3 relativeTransform <comment=PrintVector3>;     // relative x,y,z from parent
    QUATERION worldQuat <comment=GetQuaterion>;
    VECTOR3 worldTransform <comment=PrintVector3>;        // absolute x,y,z from origin
};

string PrintBoneInfo(BONE &bone) {
    string result;
    SPrintf(result, "Relative X, Y, Z: %f, %f, %f, World X, Y, Z: %f, %f, %f", bone.relativeTransform.x, bone.relativeTransform.y, bone.relativeTransform.z, bone.worldTransform.x, bone.worldTransform.y, bone.worldTransform.z);
    return result;
}

struct BONENAME {
    string boneName ;
};

struct COMPILEDBONES {
    uint numberOfBones;
    local int i;
    for (i = 0; i < numberOfBones; i++) {
        BONE bone <comment=PrintBoneInfo>;
    };
    for (i = 0; i < numberOfBones; i++) {
        BONENAME boneName <comment=GetBoneName>;
    };
};

struct COMPILEDPHYSICALBONES {
    char physics[100];
};

struct IVOINDICES(int numberOfIndices) {
    uint bytesPerElement;
    ushort indices[numberOfIndices];
    if (numberOfIndices % 2 == 1) {
        ushort filler;
    } else {
        uint filler;
        if (filler != 0) {
            FSeek(FTell() - 4);
        }
    }
};

struct IVOVERTSUVS(int numberOfVertices) {
    uint bytesPerElement;

    struct VERTUV {
        VECTOR3 vertex <comment=PrintVector3>;
        COLOR color <comment=PrintColor>;
        UVHalf uv <comment=PrintUVHalf>;
    };
    VERTUV vertUvs[numberOfVertices];
};

struct IVOCOLORS(int numberOfVertices) {
    uint bytesPerElement;
    COLOR vertexColors[numberOfVertices] <comment=PrintColor>;
    if (numberOfVertices % 2 == 1) {
        uint filler;
    }
};

struct IVONORMALS(int numberOfVertices) {
    uint bytesPerElement;
    IVONORMAL normals[numberOfVertices] <comment=PrintNormal>;
    if (numberOfVertices % 2 == 1) {
        uint filler;
    }
};

struct TANGENTS(int numberOfVertices) {
    uint bytesPerElement;
    for (i = 0; i < numberOfVertices; i++) {
        TANGENT_BYTE tangent <comment=PrintTangentByte>;
    };
    for (i = 0; i < numberOfVertices; i++) {
        TANGENT_BYTE bitangent <comment=PrintTangentByte>;
    };
};

struct MTLNAME {
    char Name[128];
};

struct IVOMESHSUBSET {
    uint matId;
    uint firstIndex;
    uint numIndices;
    uint firstVertex;
    uint numVertices;
    float radius;
    VECTOR3 center <comment=PrintVector3>;
    uint unknown0 <format=hex>;
    uint unknown1;
    uint unknown2;
};

struct SKINMESH {
    local ulong position;

    uint flags;
    MESHCHUNK meshChunk;
    char unknown2[116] <fgcolor=cAqua>;
    IVOMESHSUBSET meshSubsets[meshChunk.numberOfSubmeshes];
    while (!FEof()) {
        position = FTell();
        DatastreamType type;
        while (!isInEnum(type)) {
            if (FEof()) {
                break; // Exit if we reached the end of the file
            }
            DatastreamType type;
        }
        
        // Ensure no further processing if we break due to EOF
        if (FEof()) {
            break; // Stop processing if we've reached the end
        }
        switch (type) {
            case IvoVertsUvs: {
                IVOVERTSUVS vertsUvs(meshChunk.numberOfVertices) <bgcolor=cLtBlue>;
                break;
            }
            case IvoIndices: {
                IVOINDICES indices(meshChunk.numberOfIndices) <bgcolor=cDkBlue>;
                break;
            }
            case IvoNormals: {
                IVONORMALS normals(meshChunk.numberOfVertices) <bgcolor=cBlue>;
                break;
            }
            case IvoNormals2: {
                IVONORMALS normals(meshChunk.numberOfVertices) <bgcolor=cLtBlue>;
                break;
            }    
            case IvoColors2: {
                IVOCOLORS colors2(meshChunk.numberOfVertices) <bgcolor=cBlue>;
                break;
            }
            case IvoTangents: {
                TANGENTS tangents(meshChunk.numberOfVertices) <bgcolor=cDkBlue>;
                break;
            }
            case IvoBoneMap: {
                BONEMAP bonemap(meshChunk.numberOfVertices) <bgcolor=cLtBlue>;
                break;
            }
            case IvoBoneMap32: {
                BONEMAP32 bonemap(meshChunk.numberOfVertices) <bgcolor=cBlue>;
                break;
            }
        }
    };
};

string GetB2W(BONETOWORLD &b2w) {
    string result;
    SPrintf(result, "[[%f, %f, %f, %f] [%f, %f, %f, %f] [%f, %f, %f, %f]]", b2w.row1[0], b2w.row1[1], b2w.row1[2], b2w.row1[3], b2w.row2[0],b2w.row2[1],b2w.row2[2], b2w.row2[3], b2w.row3[0],b2w.row3[1],b2w.row3[2], b2w.row3[3]);
    return result;
};

string GetChunkTableType(CHUNKTABLE &chunk) {
    string result;
    SPrintf(result, "Type = %s, ID = %u", EnumToString(chunk.chunkType), chunk.id);
    return result; 
};

string GetChunkTypeFromChunkTableEntry(CHUNKTABLE &entry) {
    string result;
    SPrintf(result, "Type = %s", EnumToString(entry.chunkType));
    return result;
};

string GetBoneName(BONENAME &boneName) {
    string result;
    SPrintf(result, "Bone Name: %s", boneName.boneName);
    return result;
};

pos = FTell(); // save read position

FSeek(headerInfo.chunkHeaderTableOffset);

local int i = 0;
for (i = 0; i < headerInfo.numChunks; i++) {
    CHUNKTABLE chunkTable <bgcolor=cDkBlue,comment=GetChunkTypeFromChunkTableEntry>;
};

FSeek(pos);

for (i = 0; i < headerInfo.numChunks; i++) {
    FSeek(chunkTable[i].offset);
    switch (chunkTable[i].chunkType) {
        case MeshChunk320:
        case MeshChunk: {
            MESHCHUNK meshChunk;
            break;
        }
        case CompiledBones320:
        case CompiledBones: {
            local int64 chunkSize = chunkTable[i+1].offset - chunkTable[i].offset;
            COMPILEDBONES compiledBones  <bgcolor=cDkRed>;
            break;
        }
        case CompiledPhysicalBones: {
            COMPILEDPHYSICALBONES compiledPhysicalBones <bgcolor=cLtGreen>;
            break;
        }
        case SkinMesh2:
        case SkinMesh: {
            SKINMESH skinMesh;
            break;
        }
        case MaterialName320:
        case MaterialName: {
            MTLNAME materialName <bgcolor=cDkGreen>;
            break;
        };
        default: {
            break;
        }
    }
}
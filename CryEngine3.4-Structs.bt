//------------------------------------------------
//--- 010 Editor v8.0 Binary Template
//
//      File: Cryengine3.4-Structs
//   Authors: Geoff Gerber
//   Version: 1
//   Purpose: Structures used in Cryengine 3.4
//  Category: Structures
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------
#ifndef STRUCTS_34_H
#define STRUCTS_34_H

#include "Cryengine3.4-Enums.bt"
#include "Cryengine-Structs.bt"
#include "Cryengine-Helpers.bt"

struct HEADER {
    char fileSig[8];
    uint fileType <format=hex>;
    uint chunkVersion;
    int fileOffset;  // location of header chunks
    uint numChunks;
};

struct CHUNKTABLEENTRY {
    CHUNKTYPE chunkType;
    uint version <format=hex>;  
    uint offset <format=hex>;
    uint id <format=hex>;
    if (version == 0x0744) {
        uint size <format=hex>;
    }
    else {
        local uint size = 0;
    };
};

string GetChunkTableType(CHUNKTABLEENTRY &entry) {
    string result;
    SPrintf(result, "Type = %s", EnumToString(entry.chunkType));
    return result;
};

struct CHUNKTABLE(int numberOfChunks) {
    CHUNKTABLEENTRY chunk[numberOfChunks] <bgcolor=cDkBlue, comment=GetChunkTableType>;
};

struct SKINNINGINFO {
    
};

struct MTLNAME {
    CHUNKHEADER chunkHeader;
    MtlNameTypeEnum NFlags;
    int NFlags2;
    char Name[128];
    int PhysicalizeType;
    int NumberOfSubmaterials;
    int SubMaterialChunkID[32];
    int AdvancedDataChunkID;
    float Opacity;
    int reserved[32];
};

string GetMaterialName(MTLNAME &chunk) {
    string result;
    SPrintf(result, "%s", chunk.Name);
    return result;
};

struct CRYLINK {        // CryHeader.h
    int boneID;
    VECTOR3 offset;
    float blending;
};

struct COLORB {
    float red;
    float blue;
    float green;
    int flag;
};

struct STOREDSKINNINGINFO {
    int ticksPerFrame;
    float secsPerTick;
    int start;
    int end;
    float speed;
    float distance;
    float slope;
    int assetFlags;
    float lHeelStart, lHeelEnd;
    float lToeStart, lToeEnd;
    float rHeelStart, rHeelEnd;
    float rToeStart, rToeEnd;
    VECTOR3 moveDirection;
};

struct INTSKINVERTEX {
    VECTOR3 obsolete;
    VECTOR3 position;
    VECTOR3 obsolete2;
    uint16 boneIDs[4];
    float weights[4];
    COLORB color;
};


struct BREAKABLEPHYSICSCHUNK {
    uint granularity;
    int nMode;
    int nRetVtx;
    int nRetTets;
    int reserved[10];
};

struct PHYSICSGEOMETRY {
    int physicGeom;
    int flags;
    VECTOR3 min <comment=PrintVector3>;
    VECTOR3 max <comment=PrintVector3>;
    VECTOR3 spring_angle <comment=PrintVector3>;
    VECTOR3 spring_tension <comment=PrintVector3>;
    VECTOR3 damping <comment=PrintVector3>;
    MATRIX3x3 framemtx <comment=PrintMatrix3x3>;
};

struct COMPILEDBONE_800 {
    uint controllerID;
    PHYSICSGEOMETRY physicsGeo[2];
    float mass;
    MATRIX3x4 worldToBone <comment=PrintMatrix3x4>;    //initialpose matrix World2Bone
    MATRIX3x4 boneToWorld <comment=PrintMatrix3x4>;
    char boneName[256];
    int limbID;
    int offsetParent;       // this bone parent is this[m_nOffsetParent], 0 if the bone is root. Normally this is <= 0
    uint numChildren;       // The whole hierarchy of bones is kept in one big array that belongs to the ModelState
                            // Each bone that has children has its own range of bone objects in that array,
                            // and this points to the beginning of that range and defines the number of bones.

    int offsetChild;        // the beginning of the subarray of children is at this[m_nOffsetChildren]
                            // this is 0 if there are no children
};

string GetBoneName_800(COMPILEDBONE_800 &bone) {
    string result;
    SPrintf(result, "Name = %s", bone.boneName);
    return result;
};


struct BONENAMELIST {
    string boneName;
};

struct COMPILEDBONE_801 {
    uint controllerId;
    uint mass;
    char unknown[208];
    char boneName[48];
    int offsetParent;
    uint numChildren;
    uint offsetChild;
    MATRIX3x4 boneToWorld <comment=PrintMatrix3x4>;
};

string GetBoneName_801(COMPILEDBONE_801 &bone) {
    string result;
    SPrintf(result, "Name = %s", bone.boneName);
    return result;
};

struct COMPILEDBONES(int numberOfBones) {
    CHUNKHEADER headerInfo;
    char padding[32];
    if (headerInfo.version == 0x0800) {
        COMPILEDBONE_800 compiledBone[numberOfBones] <comment=GetBoneName_800>;
    }
    else {
        COMPILEDBONE_801 compileBone[numberOfBones] <comment=GetBoneName_801>;
    };
    
};

struct COMPILEDPHYSICALBONE {       // A lot of these are guesses.
    uint boneIndex;            // The number of the bone found.  Index in COMPILEDBONE
    uint parentIndex;          // Index of the parent bone
    uint numChildren;       // Number of child bones
    uint controllerID;      // controllerID for this bone.
    char prop[32];          // 32 byte char array
    PHYSICSGEOMETRY phys;   // physics.
};

struct COMPILEDPHYSICALBONES(int numberOfBones) {
    CHUNKHEADER headerInfo;
    char padding2[32];
    COMPILEDPHYSICALBONE compiledPhysicalBone[numberOfBones];
};

struct PHYSICALPROXY(uint32 numberOfVertices, uint32 numberOfIndices, uint32 numberOfMaterials)
{
    uint32 chunkID;
    VECTOR3 vertex[numberOfVertices];
    uint16 index[numberOfIndices];
    char m_arrMaterials[numberOfMaterials];
};

struct COMPILEDPHYSICALPROXIES {
    CHUNKHEADER chunkHeaderInfo;
    if (chunkHeaderInfo.version == 0x0800) {
        uint numberOfProxies;
        local uint i;
        for (i = 0; i < numberOfProxies; i++) {
            uint id;
            uint numberOfVertices;
            uint numberOfIndices;
            uint material;              // Size of weird null bytes at end of structure
            VECTOR3 v;
        };
    }
    else if (chunkHeaderInfo.version == 0x0801) {
        uint numberOfProxies;
        local uint i;
        for (i = 0; i < numberOfProxies; i++) {
            uint id;
            uint numberOfVertices;
            uint numberOfIndices;
            uint material;              // Size of weird null bytes at end of structure
            VECTOR3 v;
        };
    }
};

struct EXPORTFLAGS {
    CHUNKHEADER header;
    uint skipBytes;
    uint major;
    uint minor;
    uint build;
    uint revision;
    string rcVersionString;
};

string PrintExportFlags(EXPORTFLAGS &flags) {
    string result;
    SPrintf(result, "%s", flags.rcVersionString);
    return result;
};

struct SOURCEINFO(CHUNKTABLEENTRY &tableEntry) {
    CHUNKHEADER headerInfo;
    string sourceFile;
    string fileDate;
    string author;
    local CHUNKTYPE chunkType = tableEntry.chunkType;
    local uint version = tableEntry.version;
    local uint offset = tableEntry.offset;
    local uint size = tableEntry.size;
};

string PrintSourceInfo(SOURCEINFO &info) {
    string result;
    SPrintf(result, "%s", info.sourceFile);
    return result;
};

struct TIMINGINFO {
    CHUNKHEADER headerinfo;
    float secondsPerTick;
    int ticksPerFrame;
    char globalName[32];
    int globalRangeStart;
    int globalRangeEnd;
};

string PrintTimingInfo(TIMINGINFO &info) {
    string result;
    SPrintf(result, "%s, range %d to %d", info.globalName, info.globalRangeStart, info.globalRangeEnd);
    return result;
};

struct MESHCHUNK {
    CHUNKHEADER chunkHeader;
    uint Flags1;
    uint Flags2;
    uint NumVertices;
    uint NumIndices;
    //uint NumVertSubsets; // 801 format
    uint MeshSubsets;
    uint VerticesData <format=hex>;
    uint NumBuffs <format=hex>;
    uint NormalsData <format=hex>;
    uint UVsData <format=hex>;
    uint ColorsData <format=hex>;
    uint Colors2Data <format=hex>;
    uint IndicesData <format=hex>;
    uint TangentsData <format=hex>;
    uint ShCoeffsData <format=hex>;
    uint ShapeDeformationData <format=hex>;
    uint BoneMapData <format=hex>;
    uint FaceMapData <format=hex>;
    uint VertMatsData <format=hex>;
    //uint MeshPhysicsData <format=hex>; // 801 format
    uint VertsUVData <format=hex>;
    uint PhysicsData[4] <format=hex>;
    VECTOR3 MinBound <comment=PrintVector3>;
    VECTOR3 MaxBound <comment=PrintVector3>;
};



struct MESHSUBSETS {
    local int i;
    CHUNKHEADER chunkHeader;
    uint flags;
    int numberOfMeshSubsets;
    uint unknown;  // skip bytes
    uint unknown2;  // skip bytes
    for (i = 0; i < numberOfMeshSubsets; i++) {
        uint firstVertex;
        uint numberOfVertices;
        uint firstIndex;
        uint numberOfIndices;
        uint material;
        float radius;
        VECTOR3 center <comment=PrintVector3>;
    };
};

struct DATASTREAMCHUNK {
    local int i;

    CHUNKHEADER headerInfo;

    uint flags2;
    DATASTREAMTYPE datastreamType;
    uint numberOfElements;
    uint bytesPerElement;
    uint reserved1;
    uint reserved2;
    
    switch (datastreamType) {
        case VERTICES: {
            for (i = 0; i < numberOfElements; i++) {
                VECTOR3 vertices <comment=PrintVector3>;
            }   
            break;
        }
        case VERTSUVS: {
            for (i = 0; i < numberOfElements; i++) {
                VertsUvs vertsUvs;
            }
            break;
        }
        case NORMALS: {
            VECTOR3 normals[numberOfElements] <comment=PrintVector3>;
            break;
        }
        case UVS: {
            UV uv[numberOfElements] <comment=PrintUV>;
            break;   
        }
        case COLORS: {
            IRGBA colors[numberOfElements] <comment=PrintColor>;
            break;   
        }
        case INDICES: {
            uint16 indices[numberOfElements];
            break;   
        }
        case TANGENTS: {
            VECTOR4 tangent[numberOfElements];
            break;   
        }
        default: {
            break;
        }
    }
};

string GetDatastreamType(DATASTREAMCHUNK &datastream) {
    string result;
    SPrintf(result, "%s", EnumToString(datastream.datastreamType));
    return result;
};

#endif
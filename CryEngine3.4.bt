//--------------------------------------
//--- 010 Editor v6.0.3 Binary Template
//
// File: Cryengine 3.4
// Author: Geoff Gerber
// Revision:
// Purpose:
//--------------------------------------
#include "Cryengine3.4-Enums.bt"
#include "Cryengine3.4-Structs.bt"

local uint pos;
local uint i;

// custom read function
string GetChunkTableType(CHUNKTABLEENTRY &chunk) {
    string result;
    SPrintf(result, "Type = %s, ID = %X", EnumToString(chunk.chunkType), chunk.id);
    return result; 
};

string GetChunkType(CHUNK &chunk) {
    string result;
    SPrintf(result, "Type = %s, ID = %X", EnumToString(chunk.chunkType), chunk.id);
    return result;
};

string GetBoneName(COMPILEDBONE_801 &bone) {
    string result;
    SPrintf(result, "Bone Name = %s", bone.name);
    return result;
};

string PrintMatrix4x4(MATRIX4x4 &m) {
    string result;
    SPrintf(result, "[[%f, %f, %f, %f] [%f, %f, %f, %f] [%f, %f, %f, %f] [%f, %f, %f, %f]]", m.M11, m.M12, m.M13, m.M14, m.M21, m.M22, m.M23, m.M24, m.M31, m.M32, m.M33, m.M34, m.M41, m.M42, m.M43, m.M44);
    return result;
};

string PrintMatrix3x4(MATRIX3x4 &m) {
    string result;
    SPrintf(result, "[[%f, %f, %f, %f] [%f, %f, %f, %f] [%f, %f, %f, %f]]", m.M11, m.M12, m.M13, m.M14, m.M21, m.M22, m.M23, m.M24, m.M31, m.M32, m.M33, m.M34);
    return result;
};

string PrintMatrix3x3(MATRIX3x3 &m) {
    string result;
    SPrintf(result, "[[%f, %f, %f] [%f, %f, %f] [%f, %f, %f]]", m.M11, m.M12, m.M13, m.M21, m.M22, m.M23, m.M31, m.M32, m.M33);
    return result;
};

string PrintVector3(VECTOR3 &vertex) {
    string result;
    SPrintf(result, "%f, %f, %f", vertex.x, vertex.y, vertex.z);
    return result;
};

string PrintVector4(VECTOR4 &vertex) {
    string result;
    SPrintf(result, "%f, %f, %f, %f", vertex.x, vertex.y, vertex.z, vertex.w);
    return result;
};

string PrintQuaternion(QUATERNION &quat) {
    string result;
    SPrintf(result, "%f, %f, %f, %f", quat.x, quat.y, quat.z, quat.w);
    return result;
};

string PrintUV(UV &uv) {
    string result;
    SPrintf(result, "%f, %f", uv.u, uv.v);
    return result;
};

string PrintColor(IRGBA &color) {
    string result;
    SPrintf(result, "%d, %d, %d, %d", color.r, color.g, color.b, color.a);
    return result;
};

string PrintCompiledBoneInfo(COMPILEDBONE &bone) {
    string result;
    SPrintf(result, "Relative X, Y, Z: %f, %f, %f, World X, Y, Z: %f, %f, %f", bone.worldToBone.M14, bone.worldToBone.M24, bone.worldToBone.M34, bone.boneToWorld.M14, bone.boneToWorld.M24, bone.boneToWorld.M34);
    return result;
}

HEADER headerInfo <bgcolor=cLtBlue>;

pos = FTell(); // save read position
FSeek( headerInfo.fileOffset );

CHUNKTABLE chunkTable;

FSeek( pos );

for ( i = 0; i < chunkTable.numChunks; i++ ) {
    FSeek ( chunkTable.chunks[i].offset );
    CHUNK chunk <comment=GetChunkType>;
};

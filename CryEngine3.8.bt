//--------------------------------------
//--- 010 Editor v6.0.3 Binary Template
//
// File:  Cryengine 3.8, Lumberyard
// Author:  Geoff Gerber
// Revision:  1.0
// Purpose:  3D animation
//--------------------------------------

#include "Cryengine3.8-Enums.bt"
#include "CryEngine3.8-Structs.bt"
#include "Cryengine-Helpers.bt"

local uint pos;
local uint i;

HEADER headerInfo <bgcolor=cLtBlue>;

pos = FTell(); // save read position
FSeek(headerInfo.fileOffset);

CHUNKTABLEENTRY chunkTable[headerInfo.numChunks] <bgcolor=cDkBlue, comment=GetChunkTableType>;

FSeek(pos);

for (i = 0; i < headerInfo.numChunks; i++) {
    FSeek(chunkTable[i].offset);
    
    switch (chunkTable[i].chunkType) {
        case Node: {
            NODECHUNK nodeChunk(false) <comment=GetNodeName>;
            break;
        }
        case Mesh: {
            MESHCHUNK meshChunk;
            break;
        }
        case Helper: {
            HELPER helper;
            break;
        }
        case CompiledBones: {
            local int numberOfBones;
            numberOfBones = (chunkTable[i].size - 32)/584;
            COMPILEDBONES bones(numberOfBones) <bgcolor=cDkRed>;
            break;
        }
        case DataStream: {
            DATASTREAMCHUNK datastream <comment=GetDatastreamType>;
            break;
        }
        case MeshSubsets: {
            MESHSUBSETCHUNK meshSubsetChunk <bgcolor=cLtBlue, comment=PrintMeshSubsetChunk>;
            break;
        }
        case CompiledPhysicalBones: {
            COMPILEDPHYSICALBONESCHUNK compiledPhysicalBones(numberOfBones) <bgcolor=cLtGreen>;
            break;
        }
        case MtlName: {
            MTLNAMECHUNK mtlName <bgcolor=cDkGreen>;
        }
        default: {
            break;
        }
    }
};    

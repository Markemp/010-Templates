//------------------------------------------------
//--- 010 Editor v13.0.2 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

#ifndef HELPERS_IVO_H
#define HELPERS_IVO_H

#include "CryengineIvo-Structs.bt"

string GetB2W(BONETOWORLD &b2w) {
    string result;
    SPrintf(result, "[[%f, %f, %f, %f] [%f, %f, %f, %f] [%f, %f, %f, %f]]", b2w.row1[0], b2w.row1[1], b2w.row1[2], b2w.row1[3], b2w.row2[0],b2w.row2[1],b2w.row2[2], b2w.row2[3], b2w.row3[0],b2w.row3[1],b2w.row3[2], b2w.row3[3]);
    return result;
};

string PrintChunkTableType(CHUNKTABLEENTRY &chunk) {
    string result;
    SPrintf(result, "Type: %s, Ver: %x", EnumToString(chunk.chunkType), chunk.version);
    return result; 
};

string GetChunkTypeFromChunkTableEntry(CHUNKTABLE &entry) {
    string result;
    SPrintf(result, "Type: %s", EnumToString(entry.chunkType));
    return result;
};

string GetBoneName(BONENAME &boneName) {
    string result;
    SPrintf(result, "Bone Name: %s", boneName.boneName);
    return result;
};

string PrintNodeName(NODENAME &nodeName) {
    string result;
    SPrintf(result, "Node Name: %s", nodeName.nodeName);
    return result;
};

string PrintBoneInfo(BONE &bone) {
    string result;
    if (exists(bone.relativeTransform)) {    
        SPrintf(result, "Relative X, Y, Z: %f, %f, %f, World X, Y, Z: %f, %f, %f", bone.relativeTransform.x, bone.relativeTransform.y, bone.relativeTransform.z, bone.worldTransform.x, bone.worldTransform.y, bone.worldTransform.z);
    };
    return result;
}

string PrintMatrix4x4(MATRIX4x4 &m) {
    string result;
    SPrintf(result, "[[%f, %f, %f, %f] [%f, %f, %f, %f] [%f, %f, %f, %f] [%f, %f, %f, %f]]", m.M11, m.M12, m.M13, m.M14, m.M21, m.M22, m.M23, m.M24, m.M31, m.M32, m.M33, m.M34, m.M41, m.M42, m.M43, m.M44);
    return result;
};

string PrintMatrix3x4(MATRIX3x4 &m) {
    string result;
    SPrintf(result, "[[%f, %f, %f, %f] [%f, %f, %f, %f] [%f, %f, %f, %f]]", m.M11, m.M12, m.M13, m.M14, m.M21, m.M22, m.M23, m.M24, m.M31, m.M32, m.M33, m.M34);
    return result;
};

string PrintMat3x4Trans (MATRIX3x4 &mat) {
    string result;
    SPrintf(result, "[%f, %f, %f]", mat.M14, mat.M24, mat.M34);
    return result;  
};

string PrintMatrix3x3(MATRIX3x3 &m) {
    string result;
    SPrintf(result, "[[%f, %f, %f] [%f, %f, %f] [%f, %f, %f]]", m.M11, m.M12, m.M13, m.M21, m.M22, m.M23, m.M31, m.M32, m.M33);
    return result;
};

string PrintVector3(VECTOR3 &vertex) {
    string result;
    SPrintf(result, "%f, %f, %f", vertex.x, vertex.y, vertex.z);
    return result;
};

string PrintQuaternion(QUATERNION &quat) {
    string result;
    SPrintf(result, "%f, %f, %f, %f", quat.x, quat.y, quat.z, quat.w);
    return result;
};

string PrintVector3CryHalf(VECTOR3CRYHALF &vertex) {
    string result;
    SPrintf(result, "%f, %f, %f", CryHalfToFloat(vertex.x), CryHalfToFloat(vertex.y), CryHalfToFloat(vertex.z));
    return result;
};

string PrintTangentByte(TANGENT_BYTE &tangent) {
    string result;
    SPrintf(result, "x: %f, y: %f, z: %f, w: %f", tangent.x/127, tangent.y/127, tangent.z/127, tangent.z/127);
    return result;
};

string PrintNormal(IVONORMAL &normal) {
    string result;
    local VECTOR3 norm;
    norm.x = (2 * (normal.x/127.0 * normal.z/127.0 + normal.y/127.0 * normal.w/127.0));
    norm.y = (2 * (normal.y/127.0 * normal.z/127.0 - normal.x/127.0 * normal.w/127.0));
    norm.z = (2 * (normal.z/127.0 * normal.z/127.0 + normal.w/127.0 * normal.w/127.0)) - 1;
    SPrintf(result, "%f, %f, %f", norm.x, norm.y, norm.z);
    return result;
};

string PrintVector4SNorm(VECTOR4SNORM &norm) {
    string result;
    SPrintf(result, "x: %f, y: %f, z: %f, w: %f", Max(norm.x/32767.0, -1.0), Max(norm.y/32767.0, -1.0), Max(norm.z/32767.0, -1.0), Max(norm.w/32767.0, -1.0));
    return result;
};

string PrintVector4BNorm(VECTOR4BNORM &norm) {
    string result;
    SPrintf(result, "x: %f, y: %f, z: %f, w: %f", Max(norm.x/127.0, -1.0), Max(norm.y/127.0, -1.0), Max(norm.z/127.0, -1.0), Max(norm.w/127.0, -1.0));
    return result;
};

string PrintVector4UNorm(VECTOR4UNORM &norm) {
    string result;
    SPrintf(result, "x: %f, y: %f, z: %f, w: %f", Max(norm.x/32767.0, -1.0), Max(norm.y/32767.0, -1.0), Max(norm.z/32767.0, -1.0), Max(norm.w/32767.0, -1.0));
    return result;
};

//string PrintSubObjChunk(SUBOBJCHUNK &chunk) {
//    string result;
//    SPrintf(result, "%s", name);
//    return result;
//};

string PrintBBox(BBOX &bbox) {
    string result;
    SPrintf(result, "Min: %f, %f, %f, Max: %f, %f, %f", bbox.min.x, bbox.min.y, bbox.min.z, bbox.max.x,bbox.max.y,bbox.max.z);
    return result;
};

string PrintMeshSubsetInfo(IVOMESHSUBSET &meshSubset) {
    string result;
    SPrintf(result, "first vert: %d, num verts: %d, mat: %d, parent: %d", meshSubset.firstVertex, meshSubset.numVertices, meshSubset.matId, meshSubset.meshParent);
    return result;
};

string PrintColor(COLOR &color) {
    string result;
    SPrintf(result, "%d, %d, %d, %d", color.red, color.blue, color.green, color.alpha);
    return result;
};

string PrintUVHalf(UVHALF &uv) {
    string result;
    SPrintf(result, "%f, %f", uv.u, uv.v);
    return result;
};

float CryHalfToFloat(ushort value) {
    uint Mantissa;
    uint Exponent;
    uint Result;

    Mantissa = (uint)(value & 0x03FF);

    if ((value & 0x7C00) != 0)  // The value is normalized
    {
        Exponent = (uint)((value >> 10) & 0x1F);
    }
    else if (Mantissa != 0)     // The value is denormalized
    {
        // Normalize the value in the resulting float
        Exponent = 1;

        do
        {
            Exponent--;
            Mantissa <<= 1;
        } while ((Mantissa & 0x0400) == 0);

        Mantissa &= 0x03FF;
    }
    else                        // The value is zero
    {
        Exponent = (uint)-112;
    }

    Result = ((value & 0x8000) << 16) | // Sign
        ((Exponent + 112) << 23) | // Exponent
        (Mantissa << 13);          // Mantissa

    return (float)Result;
};

#endif
//------------------------------------------------
//--- 010 Editor v13.0.2 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

#ifndef STRUCTS_IVO_H
#define STRUCTS_IVO_H

#include "Cryengine-BaseTypes.bt"
#include "CryengineIvo-Enums.bt"

struct HEADER {
    char fileSig[4];
    uint version;
    uint numChunks;
    int offset;  // location of header chunks
};

struct CHUNKTABLEENTRY {
    CHUNKTYPE chunkType <format=hex>;
    uint version <format=hex>;  
    uint64 offset <format=hex>;
};

struct CHUNKTABLE(int numberOfChunks) {
    local uint i;
    for (i = 0; i < numberOfChunks; i++) {
        CHUNKTABLEENTRY tableEntry <comment=PrintChunkTableType>;
    };
};

struct MESHCHUNK {
    uint flags2;  // 4 = no normals datastream, 5 has normals datastream
    int numberOfVertices;
    int numberOfIndices;
    int numberOfSubmeshes;
    int unknown <format=hex>;
    VECTOR3 minBound <comment=PrintVector3>;
    VECTOR3 maxBound <comment=PrintVector3>;
    VECTOR3 scalingMinBound <comment=PrintVector3>;
    VECTOR3 scalingMaxBound <comment=PrintVector3>;
    VERTEXFORMAT vertexFormat; // 0x2 for eVF_P3F_C4B_T2H, 0x4 for eVF_P3S_C4B_T2H
};

struct IVOINDICES(int numberOfIndices) {
    uint bytesPerElement;
    ushort indices[numberOfIndices];
    if (numberOfIndices % 2 == 1) {
        ushort filler;
    } else {
        uint filler <hidden=true>;
        if (filler != 0) {
            FSeek(FTell() - 4);
        }
    }
};

struct IVOVERTSUVS(int numberOfVertices) {
    uint bytesPerElement;

    struct VERTUV {
        VECTOR3 vertex <comment=PrintVector3>;
        COLOR color <comment=PrintColor>;
        UVHALF uv <comment=PrintUVHalf>;
    };
    VERTUV vertUvs[numberOfVertices];
    if (numberOfVertices % 2 == 1) uint filler;
};

struct IVOVERTSUVS_CGF(int numberOfVertices) {
	uint bytesPerElement;

	struct IVOVERTUV {
		VECTOR3CRYHALF vertices <comment=PrintVector3CryHalf>;
        short skip;
		COLOR color <comment=PrintColor>;
		UVHALF uv <comment=PrintUVHalf>;
	};

	IVOVERTUV vertUvs[numberOfVertices];
	if (numberOfVertices % 2 == 1) uint filler;
};

struct IVOCOLORS(int numberOfVertices) {
    uint bytesPerElement;
    COLOR vertexColors[numberOfVertices] <comment=PrintColor>;
    if (numberOfVertices % 2 == 1) uint filler;
};

struct IVONORMAL {
    byte x;
    byte y;
    byte z;
    byte w;
};

struct IVONORMALS(int numberOfVertices) {
    uint bytesPerElement;
    IVONORMAL normals[numberOfVertices] <comment=PrintNormal>;
    if (numberOfVertices % 2 == 1) uint filler;
};

struct TANGENTBITANGENT_IVO {
    VECTOR4BNORM tangents <comment=PrintVector4BNorm>;
    VECTOR4BNORM bitangents <comment=PrintVector4BNorm>;
};

struct TANGENTS(int numberOfVertices) {
    uint bytesPerElement;
    TANGENTBITANGENT_IVO tangents[numberOfVertices];
    if (numberOfVertices % 2 == 1) uint filler;
};

struct IVOMESHSUBSET {
    ushort matId;
    ushort meshParent;
    uint firstIndex;
    uint numIndices;
    uint firstVertex;
    uint unknown;
    uint numVertices;
    VECTOR3 center <comment=PrintVector3>;
    int unknown0 <format=hex>;
    int unknown1 <format=hex>;
    int unknown2 <format=hex>;
};

struct BONENAME {
    string boneName ;
};

struct MTLNAME {
    char Name[128];
};

struct BONETOWORLD {
    float row1[4];
    float row2[4];
    float row3[4];
};

struct BONE {
    uint controllerId;
    uint limbId;
    int parentIndex;
    QUATERNION relativeQuat <comment=PrintQuaternion>;
    VECTOR3 relativeTransform <comment=PrintVector3>;     // relative x,y,z from parent
    QUATERNION worldQuat <comment=PrintQuaternion>;
    VECTOR3 worldTransform <comment=PrintVector3>;        // absolute x,y,z from origin
};

struct BONEIDS_x901 {
	uint controllerId;
	uint uVal1; // I haven't a damn clue what this is, it may be a uint id, it may be some kind of referencing with two shorts. 
	short uParentIndex;
	short uVal3;
	short numberOfVertices; // Seems to be two shorts that are always -1 in the files I've seen
	short uBoneIndex; // Seems to be an indicator of location within a larger set of bones? Ordered by parent, then iterative by this value
};

struct NODENAME {
    string nodeName;
};

struct NODEDETAIL {
    uint controllerId; // ?
    short unknown1;
    short numberOfChildren;
    short parentIndex;  // 0xffff if root
    short unknown2;  // always 0xffff
    short unknown3;  // always 0xffff
    short objectNodeId; // points to mesh info identifier (like chunk id)
};

struct SOMENODEINFO { // 14 words
    int parentId, otherId;
    int someId;
    int someZeros, someMoreZeros;
    int data[9];
};

struct NODEDETAILSIVO {
    local int i;
    int numberOfNodes;
    int stringTableSize;
    int flags1;
    int flags2;
    for (i = 0; i < numberOfNodes; i++) {
        NODEDETAIL nodeDetail;
    };
    for (i = 0; i < numberOfNodes; i++) {
        NODENAME nodeName  <comment=PrintNodeName>;
    };
    local int pos;
    pos = FTell();
    if (pos % 4 != 0) {
        byte skip[4 - (pos % 4)] <hidden=false>;
    };
    if (pos % 8 != 0) {
        int skip2 <hidden=false>;
    };
    SOMENODEINFO someNodeInfo[numberOfNodes];
    
};

struct BONETRANSFORMS_x901 {
	QUATERNION relativeQuat <comment=PrintQuaternion>;
	VECTOR3 relativeTransform <comment=PrintVector3>; // relative x,y,z from parent
	QUATERNION worldQuat <comment=PrintQuaternion>;
	VECTOR3 worldTransform <comment=PrintVector3>; // absolute x,y,z from origin
};

struct COMPILEDBONES(int version) {
    if (version == 0x0900) {
        int numberOfBones;
        local int i;
        for (i = 0; i < numberOfBones; i++) {
            BONE bone <comment=PrintBoneInfo>;
        };
        for (i = 0; i < numberOfBones; i++) {
            BONENAME boneName <comment=GetBoneName>;
        };
    } else if (version == 0x0901) {
        int numberOfBones;
        local int i;
        
    };
};

struct COMPILEDPHYSICALBONES {
    char physics[100];
};

struct LODDISTANCE_x900 {
    uint unknown;
    VECTOR3 unkBound1 <comment=PrintVector3>;
    VECTOR3 unkBound2 <comment=PrintVector3>;    
};

struct STATOBJ_PHYSICS_x900 {
    // The following values are indexes used in pointer math that are multiplied by 2
    // which is the size of the following values being read in the chunk.
    uint base_iter; // Base of the chunk/iteration table
    uint unk_iter1;
    uint unk_iter2;
    uint unk_iter3;
    uint unk_iter4;
    uint unk_iter5;
    uint unk_iter6;
    uint unk_iter7;
    uint unk_iter8;
    uint unk_iter9;
    uint end_iter; // Chunk parser attempts to parse this first
    
    uint unk_val1;
    uint unk_val2;
    
    struct PHYS_VECS {
        ushort index1;
        ushort unk;
        uint unk1;
    };
    
    // Needs more work as this is obviously misaligned.
    // Probably misreading disassembly
    PHYS_VECS base_vec[base_iter*2];
    PHYS_VECS unk1_vec[unk_iter1*2];
    PHYS_VECS unk2_vec[unk_iter2*2];
    PHYS_VECS unk3_vec[unk_iter3*2];
    PHYS_VECS unk4_vec[unk_iter4*2];
    PHYS_VECS unk5_vec[unk_iter5*2];
    PHYS_VECS unk6_vec[unk_iter6*2];
    PHYS_VECS unk7_vec[unk_iter7*2];
    PHYS_VECS unk8_vec[unk_iter8*2];
    PHYS_VECS unk9_vec[unk_iter9*2];
    PHYS_VECS end_vec[end_iter*2];
};

struct BBOX {
    VECTOR3 min <comment=PrintVector3>;
    VECTOR3 max <comment=PrintVector3>;  
};

struct UNKNOWN_4BYTE {
    byte x;
    byte y;
    byte z;
    byte w;
};

struct UNKNOWN_2BYTE {
    byte x;
    byte y;
};

struct IVOUNK3(int numberOfVertices) {
    uint bytesPerElement;
    UNKNOWN_2BYTE unk[numberOfVertices];
    if (numberOfVertices % 2 == 1) {
        ushort filler;
    } else {
        uint filler;
        if (filler != 0) {
            FSeek(FTell() - 4);
        }
    }
};

struct NODEMESHCOMBO {
    struct IVOTRANSFORMS {
        MATRIX3x4 transMatGlobal <comment=PrintMat3x4Trans>;
        MATRIX3x4 transMatRelative <comment=PrintMat3x4Trans>;
        VECTOR3 scaleComponent <comment=PrintVector3>; // Appears the be the same values previously in the helper chunk "pos" vector, but divided by 100? Clearly not a pos vector besides that.
    } transforms;

    uint unkVal <format=hex>; // No idea
    uint unknown;
    ushort parentNodeId; // Parent id, 
    ushort unkShort <format=hex>; // appears to generally be 0x3?
    BBOX boundingBox <comment=PrintBBox>;
    uint unkVals[4];
    uint numVertices;
    ushort numChildren;
    ushort flag <format=hex>;
    // Everything past this point is currently unknown
    struct Unknown {
        ushort unkShort;
        ushort unkShort; // Also seems to always be 256
        VECTOR3 unkVec1 <comment=PrintVector3>; // Both of the following have values which are conveniently floats that are either 1.0 or -1.0, 
        VECTOR3 unkVec1 <comment=PrintVector3>; // with first value of the second vector being 0.
        uint unkInt;
        uint unkInt_256; // Seems to always be 256?
        uint unkInt_0;
    } unknown;
};

struct NODEMESHCOMBOCHUNK {
    uint zeroPad;
    uint numberOfNodes;
    uint numberOfMeshes; // Not all nodes will have a mesh chunk.  Examples:  Helper nodes
    uint unknown;
    uint numberOfMeshSubsets;
    uint stringTableSize;
    uint unknown2;
    uint unknown3;
           
    NODEMESHCOMBO nodeMeshCombo[numberOfNodes];
    
    ushort unknownIndices[unknown]; // No idea, but count matches unknown under numberOfMeshes (numberOfMeshes - 1)
    ushort materialIndices[numberOfMeshSubsets];

    local int i;
    for (i = 0; i < numberOfNodes; i++) {
        NODENAME nodeName  <comment=PrintNodeName>;
    };
    local int pos;
    pos = FTell();
    if (pos % 4 != 0) {
        byte skip[4 - (pos % 4)] <hidden=false>;
    };
};

struct SKINMESH {
    uint flags;
    MESHCHUNK meshChunk;
    char unknown2[92] <fgcolor=cAqua>;
    IVOMESHSUBSET meshSubsets[meshChunk.numberOfSubmeshes] <comment=PrintMeshSubsetInfo>;

    while (!FEof()) {
        DatastreamType type <hidden=true>;
        while (!isInEnum(type)) {
            if (!FEof()) {
                DatastreamType type <hidden=true>;
            };
        };
        switch (type) {
            case IvoVertsUvs: {
                IVOVERTSUVS vertsUvs(meshChunk.numberOfVertices) <bgcolor=cLtBlue>;
                break;
            }
            case IvoIndices: {
                IVOINDICES indices(meshChunk.numberOfIndices) <bgcolor=cDkBlue>;
                break;
            }
            case IvoNormals: {
                IVONORMALS normals(meshChunk.numberOfVertices) <bgcolor=cBlue>;
                break;
            }
            case IvoNormals2: {
                IVONORMALS normals(meshChunk.numberOfVertices) <bgcolor=cLtBlue>;
                break;
            }    
            case IvoColors2: {
                IVOCOLORS colors2(meshChunk.numberOfVertices) <bgcolor=cBlue>;
                break;
            }
            case IvoTangents: {
                TANGENTS tangents(meshChunk.numberOfVertices) <bgcolor=cDkBlue>;
                break;
            }
            case IvoBoneMap: {
                //BONEMAP bonemap(meshChunk.numberOfVertices) <bgcolor=cLtBlue>;
                break;
            }
            case IvoBoneMap32: {
                //BONEMAP32 bonemap(meshChunk.numberOfVertices) <bgcolor=cBlue>;
                break;
            }
            case IvoVertsUvsCGF: {
                IVOVERTSUVS_CGF vertsUvs(meshChunk.numberOfVertices) <bgcolor=cDkBlue>;
                break;
            }
            case IvoTangentsCGF: {
                TANGENTS tangents(meshChunk.numberOfVertices) <bgcolor=cLtBlue>;
                break;
            }
            case IvoUnknown3: {
                IVOUNK3 unk(meshChunk.numberOfVertices) <bgcolor=cBlue>;
                break;
            }
        }
    };
};

#endif